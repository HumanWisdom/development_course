name: new-build-humanwisdom-prod

on:
  push:
    branches: [Production]
    
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    
     - uses: trstringer/manual-approval@v1
       with:
        secret: ${{ github.TOKEN }}
        approvers: HumanWisdomInfo

     - name: Checkout code
       uses: actions/checkout@v2
    
     - name: Setup nodejs
       uses: actions/setup-node@v2
       with:
        node-version: '16'

     - name: Cache node modules
       id: cache-nodemodules
       uses: actions/cache@v2
       env:
        cache-name: cache-node-modules
       with:
        path: HumanWisdom/node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
        
     - name: Install global dependencies
       run: |
        npm install -g @ionic/cli
        npm install -g @angular/cli

     - name: Install project dependencies
       run: |
        cd HumanWisdom
        npm install --force

     - name: Build the project
       run: |
        cd HumanWisdom
        export NODE_OPTIONS=--max_old_space_size=8096
        ionic build --configuration=production --project="adults" -- --base-href /course/

     - name: Compress the build artifacts
       run: |
        cd HumanWisdom
        mkdir -p builds/compressed
        tar -czf builds/compressed/program.tgz www/
 
     - name: Upload artifact
       uses: actions/upload-artifact@v2
       with:
        name: program-artifact
        path: HumanWisdom/builds/compressed/program.tgz
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: program-artifact

    - name: Copy the artifact to remote server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.NEW_PRODUCTION_HOST }}
        username: ${{ secrets.New_PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        source: "program.tgz"
        target: "builds/compressed/${{ github.run_id }}"
        
    - name: Setup the build on remote server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.NEW_PRODUCTION_HOST }}
        username: ${{ secrets.New_PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          rm -rf builds/uncompressed/${{ github.run_id }}
          mkdir -p builds/uncompressed/${{ github.run_id }}
          tar -zxf builds/compressed/${{ github.run_id }}/program.tgz -C builds/uncompressed/${{ github.run_id }}
          sudo rm -rf /var/www/html/course_backup_1
          sudo cp -R /var/www/html/course/ /var/www/html/course_backup_1
          sudo mkdir -p /var/www/html/course
          sudo rm -rf /var/www/html/course
          sudo mv builds/uncompressed/${{ github.run_id }}/www /var/www/html/course
          sudo chown ubuntu:ubuntu course
          sudo chown ubuntu:ubuntu course_backup_1
          
          
          
